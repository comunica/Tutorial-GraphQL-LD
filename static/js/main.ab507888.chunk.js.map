{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","profileInput","activeProfile","prevProps","webId","this","props","setState","profile","src","popup","htmlFor","id","value","onChange","e","target","onClick","viewProfile","sources","query","gql","loading","error","data","toString","console","log","name","image","alt","width","friends","map","friend","key","React","Component","withWebId","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0yBAMMA,E,2MACJC,MAAQ,CAAEC,aAAc,GAAIC,cAAe,I,kFAExBC,GAAY,IACrBC,EAAUC,KAAKC,MAAfF,MACJA,GAASA,IAAUD,EAAUC,OAC/BC,KAAKE,SAAS,CAAEN,aAAcG,M,kCAGtBI,GACVH,KAAKE,SAAS,CAAEN,aAAcO,EAASN,cAAeM,M,+BAG9C,IAAD,SACiCH,KAAKL,MAArCC,EADD,EACCA,aAAcC,EADf,EACeA,cACtB,OACE,6BACE,8CACA,2BACE,kBAAC,YAAD,+BACA,kBAAC,WAAD,6BAA+B,kBAAC,QAAD,CAAOO,IAAI,cAA1C,KACA,kBAAC,aAAD,CAAYC,MAAM,gBAEpB,2BACE,2BAAOC,QAAQ,WAAf,YACA,2BAAOC,GAAG,UAAUC,MAAOZ,EACpBa,SAAU,SAAAC,GAAC,OAAI,EAAKR,SAAS,CAAEN,aAAcc,EAAEC,OAAOH,WAC7D,4BAAQI,QAAS,kBAAM,EAAKC,YAAYjB,KAAxC,SAGDC,GACD,kBAAC,oBAAD,CAAmBiB,QAAS,CAAEjB,IAC5B,kBAAC,QAAD,CACEkB,MAAOC,IAAF,OASJ,YAA+B,IAA5BC,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,KAClB,OAAIF,EAAgB,yCAChBC,EAAc,qCAAWA,EAAME,aACnCC,QAAQC,IAAIH,GAEV,4BACE,yCACA,4BAAKA,EAAKI,MACV,qCACA,4BAAI,yBAAKnB,IAAKe,EAAKK,MAAOC,IAAKN,EAAKI,KAAMG,MAAM,WAChD,uCACA,4BACE,4BAEIP,EAAKQ,SAAWR,EAAKQ,QAAQC,KAAI,SAAAC,GAAM,OACrC,wBAAIC,IAAKD,EAAOtB,IACd,4BAAQK,QAAS,kBAAM,EAAKC,YAAYgB,EAAOtB,MAC5CsB,EAAON,MAAQM,EAAOtB,qB,GA3DnCwB,IAAMC,WA2ETC,sBAAUvC,GCrELwC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.ab507888.chunk.js","sourcesContent":["import React from 'react';\nimport { LoggedIn, LoggedOut, AuthButton, Value, withWebId } from '@solid/react';\nimport { GraphQlLdProvider, Query } from 'solid-react-graphql-ld';\nimport gql from \"graphql-tag\";\nimport './App.css';\n\nclass App extends React.Component {\n  state = { profileInput: '', activeProfile: '' };\n\n  componentDidUpdate(prevProps) {\n    const { webId } = this.props;\n    if (webId && webId !== prevProps.webId)\n      this.setState({ profileInput: webId });\n  }\n\n  viewProfile(profile) {\n    this.setState({ profileInput: profile, activeProfile: profile });\n  }\n\n  render() {\n    const { profileInput, activeProfile } = this.state;\n    return (\n      <div>\n        <h1>Profile viewer</h1>\n        <p>\n          <LoggedOut>You are not logged in.</LoggedOut>\n          <LoggedIn>You are logged in as <Value src=\"user.name\"/>.</LoggedIn>\n          <AuthButton popup=\"popup.html\"/>\n        </p>\n        <p>\n          <label htmlFor=\"profile\">Profile:</label>\n          <input id=\"profile\" value={profileInput}\n                 onChange={e => this.setState({ profileInput: e.target.value })}/>\n          <button onClick={() => this.viewProfile(profileInput)}>View</button>\n        </p>\n\n        {activeProfile &&\n        <GraphQlLdProvider sources={[ activeProfile ]}>\n          <Query\n            query={gql`query @single(scope: all) {\n              name\n              image\n              friends @plural {\n                id\n                name @optional\n              }\n            }`}\n          >\n            {({ loading, error, data }) => {\n              if (loading) return <p>Loading...</p>;\n              if (error) return <p>Error: {error.toString()}</p>;\n              console.log(data);\n              return (\n                <dl>\n                  <dt>Full name</dt>\n                  <dd>{data.name}</dd>\n                  <dt>Image</dt>\n                  <dd><img src={data.image} alt={data.name} width=\"100px\" /></dd>\n                  <dt>Friends</dt>\n                  <dd>\n                    <ul>\n                      {\n                        data.friends && data.friends.map(friend =>\n                          <li key={friend.id}>\n                            <button onClick={() => this.viewProfile(friend.id)}>\n                              {friend.name || friend.id}\n                            </button>\n                          </li>)\n                      }\n                    </ul>\n                  </dd>\n                </dl>\n              );\n            }}\n          </Query>\n        </GraphQlLdProvider>}\n      </div>\n    );\n  }\n}\n\nexport default withWebId(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}